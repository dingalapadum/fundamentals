Branches

Create, list, rename:
# Create a new branch 'local-branch' and switch to it
git co -b local-branch
  
# List all branches
git branch #local
git branch -a #all
  
# Rename the current branch (locally only)
git branch -m <oldname> <newname>
 
# Delete branch
git branch -d <branchToDelete>
git branch -D <branchToDelete> # 'force' delete
Modifying old commits

Change stuff in an older commit. e.g. wrongly commited target:
git checkout <hash>  #this will detach your head (i.e. you are not on your branch anymore)
  
# do some changes: removing target
git rm -r target
# add some file
git add bla.txt
  
git commit --amend -m "<definitiv commit message>"
# git commit --amend if you want to use the same commit message as before
git rebase --onto HEAD <hash> <branch-name>
# the same hash as the one in the beginning
# branch-name is the one you left when the head got detachted
  
git push -f origin <branch-name>
Go back in the commit history
# uncommit last 2 commits but keep changes
git reset HEAD~2
 
 
# uncommit last 4 commits but keep changes staged
git reset --soft HEAD~4
 
 
# uncommit last commit and discard all the changes
git reset --hard HEAD~
Modifying commit messages

Last commit message
git commit --amend

Older commit messages
# to get a list of the last n commits
git rebase -i HEAD~n
 
 
# then change 'pick' to reword for each of the commit messages you want to change
# save-quit
# each of the commit-messages marked with 'reword' is opened one after the other
# rewrite the message and save-quit - the next commit-message will open.